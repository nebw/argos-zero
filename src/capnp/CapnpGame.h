// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: message_schema.capnp

#ifndef CAPNP_INCLUDED_c6310a89d98447e4_
#define CAPNP_INCLUDED_c6310a89d98447e4_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ebe1d51d306584d8);
CAPNP_DECLARE_SCHEMA(a260f669aa063aa8);

}  // namespace schemas
}  // namespace capnp


struct StateProb {
  StateProb() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebe1d51d306584d8, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Game {
  Game() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a260f669aa063aa8, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class StateProb::Reader {
public:
  typedef StateProb Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getIdx() const;

  inline bool hasState() const;
  inline  ::capnp::List<float>::Reader getState() const;

  inline bool hasProbs() const;
  inline  ::capnp::List<float>::Reader getProbs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StateProb::Builder {
public:
  typedef StateProb Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getIdx();
  inline void setIdx( ::uint16_t value);

  inline bool hasState();
  inline  ::capnp::List<float>::Builder getState();
  inline void setState( ::capnp::List<float>::Reader value);
  inline void setState(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownState();

  inline bool hasProbs();
  inline  ::capnp::List<float>::Builder getProbs();
  inline void setProbs( ::capnp::List<float>::Reader value);
  inline void setProbs(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initProbs(unsigned int size);
  inline void adoptProbs(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownProbs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StateProb::Pipeline {
public:
  typedef StateProb Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Game::Reader {
public:
  typedef Game Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasStateprobs() const;
  inline  ::capnp::List< ::StateProb>::Reader getStateprobs() const;

  inline double getTimestamp() const;

  inline bool getResult() const;

  inline bool hasNetwork1() const;
  inline  ::capnp::Text::Reader getNetwork1() const;

  inline bool hasNetwork2() const;
  inline  ::capnp::Text::Reader getNetwork2() const;

  inline  ::uint8_t getBoardsize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Game::Builder {
public:
  typedef Game Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasStateprobs();
  inline  ::capnp::List< ::StateProb>::Builder getStateprobs();
  inline void setStateprobs( ::capnp::List< ::StateProb>::Reader value);
  inline  ::capnp::List< ::StateProb>::Builder initStateprobs(unsigned int size);
  inline void adoptStateprobs(::capnp::Orphan< ::capnp::List< ::StateProb>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::StateProb>> disownStateprobs();

  inline double getTimestamp();
  inline void setTimestamp(double value);

  inline bool getResult();
  inline void setResult(bool value);

  inline bool hasNetwork1();
  inline  ::capnp::Text::Builder getNetwork1();
  inline void setNetwork1( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNetwork1(unsigned int size);
  inline void adoptNetwork1(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNetwork1();

  inline bool hasNetwork2();
  inline  ::capnp::Text::Builder getNetwork2();
  inline void setNetwork2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNetwork2(unsigned int size);
  inline void adoptNetwork2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNetwork2();

  inline  ::uint8_t getBoardsize();
  inline void setBoardsize( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Game::Pipeline {
public:
  typedef Game Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint16_t StateProb::Reader::getIdx() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t StateProb::Builder::getIdx() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void StateProb::Builder::setIdx( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool StateProb::Reader::hasState() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool StateProb::Builder::hasState() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader StateProb::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder StateProb::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void StateProb::Builder::setState( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void StateProb::Builder::setState(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder StateProb::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void StateProb::Builder::adoptState(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> StateProb::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool StateProb::Reader::hasProbs() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool StateProb::Builder::hasProbs() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader StateProb::Reader::getProbs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder StateProb::Builder::getProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void StateProb::Builder::setProbs( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void StateProb::Builder::setProbs(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder StateProb::Builder::initProbs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void StateProb::Builder::adoptProbs(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> StateProb::Builder::disownProbs() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Game::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Game::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Game::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Game::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Game::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Game::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Game::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Game::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Game::Reader::hasStateprobs() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Game::Builder::hasStateprobs() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::StateProb>::Reader Game::Reader::getStateprobs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StateProb>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::StateProb>::Builder Game::Builder::getStateprobs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StateProb>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Game::Builder::setStateprobs( ::capnp::List< ::StateProb>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::StateProb>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::StateProb>::Builder Game::Builder::initStateprobs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StateProb>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Game::Builder::adoptStateprobs(
    ::capnp::Orphan< ::capnp::List< ::StateProb>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::StateProb>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::StateProb>> Game::Builder::disownStateprobs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StateProb>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline double Game::Reader::getTimestamp() const {
  return _reader.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}

inline double Game::Builder::getTimestamp() {
  return _builder.getDataField<double>(
      0 * ::capnp::ELEMENTS);
}
inline void Game::Builder::setTimestamp(double value) {
  _builder.setDataField<double>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Game::Reader::getResult() const {
  return _reader.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}

inline bool Game::Builder::getResult() {
  return _builder.getDataField<bool>(
      64 * ::capnp::ELEMENTS);
}
inline void Game::Builder::setResult(bool value) {
  _builder.setDataField<bool>(
      64 * ::capnp::ELEMENTS, value);
}

inline bool Game::Reader::hasNetwork1() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Game::Builder::hasNetwork1() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Game::Reader::getNetwork1() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Game::Builder::getNetwork1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Game::Builder::setNetwork1( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Game::Builder::initNetwork1(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Game::Builder::adoptNetwork1(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Game::Builder::disownNetwork1() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Game::Reader::hasNetwork2() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Game::Builder::hasNetwork2() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Game::Reader::getNetwork2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Game::Builder::getNetwork2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Game::Builder::setNetwork2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Game::Builder::initNetwork2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Game::Builder::adoptNetwork2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Game::Builder::disownNetwork2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::uint8_t Game::Reader::getBoardsize() const {
  return _reader.getDataField< ::uint8_t>(
      9 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Game::Builder::getBoardsize() {
  return _builder.getDataField< ::uint8_t>(
      9 * ::capnp::ELEMENTS);
}
inline void Game::Builder::setBoardsize( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      9 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_c6310a89d98447e4_
